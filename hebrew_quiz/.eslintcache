[{"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Hebrew/index.js":"1","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Verb/VerbParsingQuestion.js":"2","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizQuestion/index.js":"3","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizQuestion/constants.js":"4","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Verb/ParsingAnswer.js":"5","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizContainer/index.js":"6","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/ErrorBoundary/index.js":"7","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/history.js":"8","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizList/index.js":"9","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/App.js":"10","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/URLs/index.js":"11","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizRegistry/index.js":"12","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/reportWebVitals.js":"13","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/index.js":"14","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/MatchingQuestion/index.js":"15","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Utils/index.js":"16","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/About/index.js":"17","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Home/index.js":"18","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/NavContainer/index.js":"19","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizCompleteDialog/index.js":"20","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/quizzes/MatchingQuiz/index.js":"21","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/quizzes/ParsingQuiz/index.js":"22","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/MakeSentenceQuestion/index.js":"23","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/quizzes/MakeSentenceQuiz/index.js":"24"},{"size":1043,"mtime":1627660339480,"results":"25","hashOfConfig":"26"},{"size":4277,"mtime":1628363726349,"results":"27","hashOfConfig":"26"},{"size":2517,"mtime":1630099059872,"results":"28","hashOfConfig":"26"},{"size":112,"mtime":1627774770267,"results":"29","hashOfConfig":"26"},{"size":4510,"mtime":1628363987547,"results":"30","hashOfConfig":"26"},{"size":947,"mtime":1627962965056,"results":"31","hashOfConfig":"26"},{"size":1356,"mtime":1627615979870,"results":"32","hashOfConfig":"26"},{"size":87,"mtime":1627615877875,"results":"33","hashOfConfig":"26"},{"size":3418,"mtime":1628547825348,"results":"34","hashOfConfig":"26"},{"size":1264,"mtime":1628228497011,"results":"35","hashOfConfig":"26"},{"size":1117,"mtime":1628475690820,"results":"36","hashOfConfig":"26"},{"size":8383,"mtime":1630096341049,"results":"37","hashOfConfig":"26"},{"size":362,"mtime":1611770970699,"results":"38","hashOfConfig":"26"},{"size":605,"mtime":1627616083526,"results":"39","hashOfConfig":"26"},{"size":5115,"mtime":1628557731136,"results":"40","hashOfConfig":"26"},{"size":643,"mtime":1628525672851,"results":"41","hashOfConfig":"26"},{"size":788,"mtime":1628226199076,"results":"42","hashOfConfig":"26"},{"size":1371,"mtime":1628226456572,"results":"43","hashOfConfig":"26"},{"size":1265,"mtime":1628229602225,"results":"44","hashOfConfig":"26"},{"size":2563,"mtime":1628364814493,"results":"45","hashOfConfig":"26"},{"size":1869,"mtime":1630096833271,"results":"46","hashOfConfig":"26"},{"size":2470,"mtime":1628362838492,"results":"47","hashOfConfig":"26"},{"size":5090,"mtime":1630098774295,"results":"48","hashOfConfig":"26"},{"size":1637,"mtime":1630099106196,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j62vk3",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Hebrew/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Verb/VerbParsingQuestion.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizQuestion/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizQuestion/constants.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Verb/ParsingAnswer.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizContainer/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/ErrorBoundary/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/history.js",[],["107","108"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizList/index.js",["109"],"import React, { useState } from \"react\";\nimport { Table, Header } from 'semantic-ui-react';\nimport { Container, Icon, Button, Input, Message } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport QuizRegistry from \"../QuizRegistry\";\nimport PropTypes from 'prop-types';\n\nconst QUIZTYPE_ALL = null;\nconst QUIZTYPE_VOCAB = \"vocab\";\nconst QUIZTYPE_PARADIGM = \"paradigm\";\n\nexport function isVocab(quiz) {\n  return quiz.title.includes(\"Vocabulary\");\n}\n\nexport function filterQuizzes(quizzes, quizType) {\n  return quizzes.filter((quiz) => {\n    if (!quizType) {\n      return true;\n    } else if (quizType === QUIZTYPE_VOCAB) {\n      return isVocab(quiz);\n    } else if (quizType === QUIZTYPE_PARADIGM) {\n      return !isVocab(quiz);\n    }\n\n    return true;\n  });\n}\n\nexport function searchQuizzes(quizzes, search) {\n  return quizzes.filter((quiz) => {\n    if (!search) {\n      return true;\n    } else {\n      let match = false;\n      let searchLower = search.toLowerCase();\n\n      Object.entries(quiz).map(([, value]) => {\n        if (value.indexOf) {\n          match = match || value.toLowerCase().indexOf(searchLower) >= 0;\n        }\n      });\n      return match;\n    }\n  });\n}\n\nfunction QuizList( { inverted }) {\n  const [search, setSearch] = useState(null);\n  const [quizType, setQuizType] = useState(QUIZTYPE_ALL);\n\n  const filteredQuizzes = QuizRegistry({ inverted })\n    ? searchQuizzes(filterQuizzes(QuizRegistry({ inverted }), quizType), search)\n    : null;\n\n  const quizRows = [];\n  for (const [index, value] of filteredQuizzes.entries()) {\n    quizRows.push(\n      <Table.Row key={index}>\n        <Table.Cell>{value.chapter}</Table.Cell>\n        <Table.Cell><Link to={value.path}>{value.title}</Link></Table.Cell>\n      </Table.Row>\n    );\n  }\n\n  return (\n    <Container text>\n      <Header as=\"h1\" dividing>\n        Quizzes\n      </Header>\n\n      <Button.Group>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_ALL)}\n          active={quizType === QUIZTYPE_ALL}\n        >\n          All\n        </Button>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_VOCAB)}\n          active={quizType === QUIZTYPE_VOCAB}\n        >\n          Vocabulary\n        </Button>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_PARADIGM)}\n          active={quizType === QUIZTYPE_PARADIGM}\n        >\n          Other\n        </Button>\n      </Button.Group>\n\n      <Input\n        style={{ float: \"right\" }}\n        icon\n        placeholder=\"Search...\"\n        onChange={(e, d) => setSearch(d.value)}\n      >\n        <input />\n        <Icon name=\"search\" />\n      </Input>\n\n      {quizRows.length >= 0 && (\n        <Table basic=\"very\" celled collapsing>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Chapter</Table.HeaderCell>\n                    <Table.HeaderCell>Title</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {quizRows}\n            </Table.Body>\n        </Table>\n      )}\n      {quizRows.length === 0 && (\n        <Message\n          warning\n          header='No Matches'\n          content='No quizzes match your search.'\n          />\n      )}\n    </Container>\n  );\n}\n\nQuizList.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nQuizList.defaultProps = {\n  inverted: true,\n};\n\nexport default QuizList;\n",["110","111"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/App.js",[],["112","113"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/URLs/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizRegistry/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/reportWebVitals.js",[],["114","115"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/MatchingQuestion/index.js",["116","117","118"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Utils/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/About/index.js",[],["119","120"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/Home/index.js",[],["121","122"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/NavContainer/index.js",[],["123","124"],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/QuizCompleteDialog/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/quizzes/MatchingQuiz/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/quizzes/ParsingQuiz/index.js",[],"/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/components/MakeSentenceQuestion/index.js",["125","126","127"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Label, Divider } from \"semantic-ui-react\";\nimport QuizContainer from \"../QuizContainer\";\nimport QuizQuestion from \"../QuizQuestion\";\nimport { shuffle } from \"../Utils/index\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../QuizQuestion/constants\";\n\nfunction MakeSentenceQuestion({\n  inverted,\n  title,\n  subtitle,\n  percent,\n  onClose,\n  sentence,\n  onAnswered,\n  answer,\n}) {\n  // Track the words that the user has selected\n  const [chosenIndexes, setChosenIndexes] = useState([]);\n  const [correctIndexes, setCorrectIndexes] = useState([]);\n  const [answerWordList, setAnswerWordList] = useState(null);\n\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n\n  /** \n   * Determine if the word is in the list that the user chose\n   */\n  function isChosen(index) {\n    return chosenIndexes.includes(index);\n  }\n\n  let answerWordLabelList = null;\n\n  /**\n   * Make the list of words to include in the list of options\n   */\n  if(answerWordList) {\n    answerWordLabelList = answerWordList.map((word, index) => {\n      if (!isChosen(index)) {\n        return (\n          <Label\n            onClick={() => {\n              setChosenIndexes(chosenIndexes.concat([index]));\n            }}\n            key={index}\n          >\n            {word}\n          </Label>\n        );\n      }\n\n      return null;\n    });\n  }\n\n  /**\n   * Construct the shuffled words list\n   */\n  useEffect(() => {\n    // Break up the answer into a list\n    const answerWords = answer ? answer.split(\" \") : [];\n\n    const answerWordsShuffled = shuffle(answerWords);\n    setAnswerWordList(answerWordsShuffled);\n  }, [answer]);\n\n  /**\n   * Make the currently selected list\n   */\n  const constructedAnswer = chosenIndexes.map((index) => {\n    // Get the word for the index\n    const wordForIndex = answerWordList[index];\n\n    return (\n      <Label\n        onClick={() =>\n          setChosenIndexes(chosenIndexes.filter((value) => {\n              return value !== index;\n            }))\n        }\n        key={index}\n      >\n        {wordForIndex}\n      </Label>\n    );\n  }).reverse();\n\n  /**\n   * Handle the user pressing \"submit\"\n   */\n  const submitAnswer = () => {\n    // We have confirmed the answer status and now need to move to the next question\n    if(answerStatus === CORRECT || answerStatus === INCORRECT) {\n      // We have confirmed the answer status and now need to move to the next question\n      setChosenIndexes([]);\n      setAnswerStatus(UNANSWERED);\n    }\n\n    // If the answer status is correct, then the user has acknowledged the correct answer and wants to move on\n    if(answerStatus === CORRECT ) {\n      // Tell the caller that the question was answered and we should move to the next question\n      onAnswered(true);\n    }\n\n    // If the answer status is incorrect, then the user has acknowledged the correct answer and wants to move on\n    if(answerStatus === INCORRECT ) {\n      // Tell the caller that the question was answered and we should move to the next question\n      onAnswered(false);\n    }\n\n    // Not answered yet\n    if(answerStatus === UNANSWERED && chosenIndexes.length > 0 ) {\n      // Construct the answer\n      const answerWords = answer ? answer.split(\" \") : [];\n\n      // Determine if the answer is correct\n      let isWrong = false;\n\n      answerWords.map((word, index) => {\n        // Get the word for the index\n        const wordForIndex = answerWords[index];\n\n        // Make sure that we have enough words\n        if(index >= chosenIndexes) {\n          isWrong = true;\n        }\n        else{\n          // Get the word that the user selected\n          const selectedWordForIndex = answerWordList[chosenIndexes[index]];\n\n          // Determine if this word is the same one from the expected list\n          if(wordForIndex !== selectedWordForIndex){\n            isWrong = true;\n          }\n        }\n      });\n\n      // Set the status accordingly\n      if(isWrong){\n        setAnswerStatus(INCORRECT);\n      }\n      else{\n        setAnswerStatus(CORRECT);\n      }\n    }\n  };\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n    >\n      <QuizQuestion\n        answerStatus={answerStatus}\n        onSubmit={submitAnswer}\n        correctAnswer={answer}>\n        <p><strong>Construct the following sentence in Hebrew:</strong></p>\n        {sentence}\n        <p><div style={{height: 32}}>{constructedAnswer}</div></p>\n        <Divider />\n        <p><strong>From the following words</strong></p>\n        <p><div style={{height: 32}}>{answerWordLabelList}</div></p>\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nMakeSentenceQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  percent: PropTypes.number,\n};\n\nMakeSentenceQuestion.defaultProps = {\n  inverted: false,\n};\n\nexport default MakeSentenceQuestion;\n","/Users/lmurphey/git/hebrew_quizzes/hebrew_quiz/src/quizzes/MakeSentenceQuiz/index.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":38,"column":44,"nodeType":"134","messageId":"135","endLine":38,"endColumn":46},{"ruleId":"128","replacedBy":"136"},{"ruleId":"130","replacedBy":"137"},{"ruleId":"128","replacedBy":"138"},{"ruleId":"130","replacedBy":"139"},{"ruleId":"128","replacedBy":"140"},{"ruleId":"130","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":27,"column":24,"nodeType":"144","messageId":"145","endLine":27,"endColumn":39},{"ruleId":"146","severity":1,"message":"147","line":75,"column":6,"nodeType":"148","endLine":75,"endColumn":40,"suggestions":"149"},{"ruleId":"146","severity":1,"message":"150","line":97,"column":6,"nodeType":"148","endLine":97,"endColumn":24,"suggestions":"151"},{"ruleId":"128","replacedBy":"152"},{"ruleId":"130","replacedBy":"153"},{"ruleId":"128","replacedBy":"154"},{"ruleId":"130","replacedBy":"155"},{"ruleId":"128","replacedBy":"156"},{"ruleId":"130","replacedBy":"157"},{"ruleId":"142","severity":1,"message":"158","line":21,"column":10,"nodeType":"144","messageId":"145","endLine":21,"endColumn":24},{"ruleId":"142","severity":1,"message":"159","line":21,"column":26,"nodeType":"144","messageId":"145","endLine":21,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":120,"column":37,"nodeType":"134","messageId":"135","endLine":120,"endColumn":39},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["160"],["161"],["160"],["161"],["160"],["161"],"no-unused-vars","'setAnswerStatus' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'completedAnswers', 'completedQuestions', and 'getIndexOfAnswers'. Either include them or remove the dependency array. You can also do a functional update 'setCompletedQuestions(c => ...)' if you only need 'completedQuestions' in the 'setCompletedQuestions' call.","ArrayExpression",["162"],"React Hook useEffect has missing dependencies: 'onAnswered' and 'questionSet'. Either include them or remove the dependency array. If 'onAnswered' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["163"],["160"],["161"],["160"],["161"],["160"],["161"],"'correctIndexes' is assigned a value but never used.","'setCorrectIndexes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [selectedQuestion, selectedAnswer, getIndexOfAnswers, completedQuestions, completedAnswers]",{"range":"168","text":"169"},"Update the dependencies array to be: [completedAnswers, onAnswered, questionSet]",{"range":"170","text":"171"},[2363,2397],"[selectedQuestion, selectedAnswer, getIndexOfAnswers, completedQuestions, completedAnswers]",[3141,3159],"[completedAnswers, onAnswered, questionSet]"]